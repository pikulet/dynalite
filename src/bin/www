#!/usr/bin/env node

/**
 * Module dependencies.
 */
/* HTTP server */
const appInit = require('../app');
const debug = require('debug')('src:server');
const http = require('http');

/* COAP server */
const app_coap = require('../app_coap');
const coap = require('coap');

/* Colours */
const cGreen = '\x1b[32m';
const cReset = '\x1b[0m'; // Resets the console colour

/**
 * Create HTTP server.
 */
appInit().then((app) => {
  const host = (process.env.HOST || '127.0.0.1');
  const port = normalizePort(process.env.PORT || '8080');
  app.set('port', port);
  const server = http.createServer(app);

  // Listen on provided port, on all network interfaces.
  server.listen(port, host, () => {
    console.log(`${cGreen}[app] The HTTP server is now running at: ${cReset}http://${server.address().address}:${server.address().port}`);
  });
  server.on('error', (err) => onError(err, port));
  server.on('listening', () => onListening(server));
});


/**
 * Create COAP server.
 */
let server_coap = coap.createServer(app_coap);

server_coap.listen(() => {
  console.log(`${cGreen}[app] The COAP server is now running.${cReset}`);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server 'error' event.
 */

function onError(error, port) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server 'listening' event.
 */

function onListening(server) {
  const addr = server.address();
  let bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
}
